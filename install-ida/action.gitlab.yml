# GitLab CI/CD template for installing IDA Pro
# Usage: include this file and extend .ida-install-template

.ida-install-template:
  image: ubuntu:latest
  
  variables:
    # Required inputs (must be set by user)
    INSTALLER_ID: ""
    LICENSE_ID: ""
    HCLI_API_KEY: ""
    
    # Optional inputs with defaults
    PYTHON_VERSION: "3.10"
    HCLI_VERSION_SPECIFIER: ">=0.6.0"
    CLEAN: "true"
  
  before_script:
    - echo "Installing IDA Pro using Hex-Rays CLI..."
    
    # Update system and install Python
    - apt-get update && apt-get install -y python${PYTHON_VERSION} python3-pip curl
    
    # Install uv
    - echo "Installing uv..."
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - export PATH="$HOME/.cargo/bin:$PATH"
    - uv --version
    
    # Install Hex-Rays CLI
    - echo "Installing ida-hcli..."
    - uv tool install "ida-hcli${HCLI_VERSION_SPECIFIER}"
    - hcli --version
    
    # Create IDA installation directory
    - echo "Creating installation directory..."
    - IDADIR="$CI_BUILDS_DIR/opt/ida"
    - mkdir -p "$IDADIR"
    - echo "Using IDA directory:$IDADIR"
    
    # Download and install IDA Pro
    - echo "Downloading and installing IDA Pro..."
    - hcli ida install -d "$INSTALLER_ID" -l "$LICENSE_ID" -i "$IDADIR"
    - echo "IDA Pro installed successfully!"
    - echo "Installation directory:$IDADIR"
    
    # Verify installation
    - |
      if [ -d "$IDADIR" ] && [ "$(ls -A "$IDADIR")" ]; then
        echo "Installation contents:"
        ls -la "$IDADIR"
      else
        echo "Installation directory appears to be empty"
        exit 1
      fi
    
    # Set platform-specific IDABIN path
    - |
      if [[ "$CI_RUNNER_OS" == "macos" ]] || [[ "$RUNNER_OS" == "macOS" ]]; then
        IDABIN="$IDADIR/Contents/MacOS/ida"
      else
        IDABIN="$IDADIR/ida"
      fi
    
    # Export environment variables for subsequent jobs
    - echo "IDADIR=$IDADIR" >> ida.env
    - echo "IDABIN=$IDABIN" >> ida.env
    - echo "IDADIR environment variable set to $IDADIR"
    - echo "IDABIN environment variable set to $IDABIN"
    
    # Clean up installation tools if requested
    - |
      if [[ "$CLEAN" == "true" ]]; then
        echo "Cleaning up installation tools..."
        
        # Remove uv and cargo bin directory
        if [ -d "$HOME/.cargo/bin" ]; then
          echo "Removing uv and cargo tools..."
          rm -rf "$HOME/.cargo"
        fi
        
        # Remove hcli from PATH
        if [ -d "$HOME/.local/bin" ]; then
          echo "Cleaning up local bin directory..."
          rm -f "$HOME/.local/bin/hcli"
        fi
        
        # Clean up Python cache/temp files
        echo "Cleaning up Python cache files..."
        find /tmp -name "pip-*" -type d -exec rm -rf {} + 2>/dev/null || true
        find /tmp -name "tmp*" -name "*python*" -type d -exec rm -rf {} + 2>/dev/null || true
        
        echo "Installation cleanup completed - only IDA Pro remains at $IDADIR"
      else
        echo "Installation tools kept available:"
        echo "- Python $PYTHON_VERSION"
        echo "- uv (in ~/.cargo/bin)"
        echo "- hcli (in ~/.local/bin or uv tools)"
        echo "- IDA Pro (in $IDADIR)"
        echo ""
        echo "Tools are available for subsequent jobs."
      fi
  
  artifacts:
    reports:
      dotenv: ida.env
    paths:
      - "$CI_BUILDS_DIR/opt/ida"
    expire_in: 1 hour

# Example usage job (can be extended by users)
.ida-verify-template:
  needs: 
    - job: install-ida
      artifacts: true
  script:
    - echo "Verifying IDA installation..."
    - echo "IDADIR: $IDADIR"
    - echo "IDABIN: $IDABIN"
    - |
      if [ -d "$IDADIR" ]; then
        echo "IDA directory exists at: $IDADIR"
        ls -la "$IDADIR"
      else
        echo "IDA directory not found"
        exit 1
      fi
    - |
      if [ -f "$IDABIN" ] || [ -f "$IDABIN.exe" ]; then
        echo "IDA binary found at: $IDABIN"
      else
        echo "IDA binary not found"
        exit 1
      fi